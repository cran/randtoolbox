SFMT-sse2-607-1.h:    //Rprintf("zog1 \n");
SFMT-sse2-607-1.h:    x = _mm_load_si128(a);  //Rprintf("zog2 \n");
SFMT-sse2-607-1.h:    y = _mm_srli_epi32(*b, SR1_607_1);    //Rprintf("zog3 \n");
SFMT-sse2-607-1.h:    z = _mm_srli_si128(c, SR2_607_1);    //Rprintf("zog4 \n");
SFMT-sse2-607-1.h:    v = _mm_slli_epi32(d, SL1_607_1);    //Rprintf("zog5 \n");
SFMT-sse2-607-1.h:    z = _mm_xor_si128(z, x);    //Rprintf("zog6 \n");
SFMT-sse2-607-1.h:    z = _mm_xor_si128(z, v);    //Rprintf("zog7 \n");
SFMT-sse2-607-1.h:    x = _mm_slli_si128(x, SL2_607_1);    //Rprintf("zog8 \n");
SFMT-sse2-607-1.h:    y = _mm_and_si128(y, mask);    //Rprintf("zog9 \n");
SFMT-sse2-607-1.h:    z = _mm_xor_si128(z, x);    //Rprintf("zog10 \n");
SFMT-sse2-607-1.h:    z = _mm_xor_si128(z, y);    //Rprintf("zog11 \n");
SFMT-sse2-607-1.h:    //Rprintf("mask\n");
SFMT-sse2-607-1.h:    //Rprintf("blii\n");
SFMT-sse2-607-1.h:    //Rprintf("tauoo\n");
SFMT-sse2-607-1.h:    //Rprintf("mask\n");
SFMT-sse2-607-1.h:        //Rprintf("tauoo1\n");
SFMT-sse2-607-1.h:        //Rprintf("i : %d\t");
SFMT-sse2-607-1.h:        //Rprintf("tauoo2\n");
SFMT-sse2-607-1.h:        //Rprintf("tauoo3\n");
SFMT-sse2-607-1.h:        //Rprintf("tauoo4\n");
SFMT-sse2-607-1.h:        //Rprintf("tauoo5\n");
SFMT.c:        //Rprintf("SSE2 supported\n");
SFMT.c:            //Rprintf("1_ %d idx\n", idxSFMT607);
SFMT.c:            //Rprintf("%d idx\n", idxSFMT1279);
SFMT.c:            //Rprintf("%d idx\n", idxSFMT2281);
SFMT.c:            //Rprintf("%d idx\n", idxSFMT4253);
SFMT.c:            //Rprintf("%d idx\n", idxSFMT11213);
SFMT.c:            //Rprintf("%d idx\n", idxSFMT19937);
SFMT.c:                //Rprintf("2- %d idx\n", idxSFMT607);
SFMT.c:                Rprintf("2 64bit- %d idx\n", idxSFMT607);
SFMT.c:            //Rprintf("2- %d idx\n", idxSFMT607);
SFMT.c:            Rprintf("2 64bit- %d idx\n", idxSFMT607);
SFMT.h: * PRIu64 and PRIx64 are used for printf function to print 64-bit
congruRand.c:		sprintf(params[0], "%llu", mod);
congruRand.c:	sprintf(params[1], "%llu", mult);
congruRand.c:	sprintf(params[2], "%llu", incr);
congruRand.c:	sprintf(seed[0], "%llu", congru_seed);
congruRand.c:	//Rprintf("mod = %llu, mask = %llu, err = %d\n", inp_mod, inp_mask, *err);
Binary file congruRand.o matches
knuthTAOCP2002.c:  printf("%.20f\n", ran_u[0]);            /* 0.36410514377569680455 */
knuthTAOCP2002.c:     /* beware of buggy printf routines that do not give full accuracy here! */
knuthTAOCP2002.c:  printf("%.20f\n", ran_u[0]);            /* 0.36410514377569680455 */
Binary file knuthTAOCP2002.o matches
randtoolbox.c:                Rprintf("%u th integer generated : %llu\n", 1+ i + j * nb, temp);
randtoolbox.c:    //Rprintf("zog\n");
randtoolbox.c:        //Rprintf("blocksize %d\n", blocksize);
randtoolbox.c:        //Rprintf("mem %d \n", array);
randtoolbox.c:        //Rprintf("rounded size %d initial size %d\n", roundedsize, nb*dim);
randtoolbox.c:        //Rprintf("fill_array32 ends\n");
randtoolbox.c:    //        Rprintf("%u \t", array[i + j * nb] ); // real on ]0,1[ interval
randtoolbox.c:   // Rprintf("\n");
randtoolbox.c:    //Rprintf("1st term %.20f --- seed  %u\n", u[0], seed);
randtoolbox.c://    Rprintf("length %d \n", length);
randtoolbox.c:        Rprintf("%lu \t", seedArray[i]);
randtoolbox.c:        Rprintf("- %lu %d %d %d %d \n", seedArray[i], i/4, (i+1)/4, (i+2)/4, (i+3)/4);
randtoolbox.c:    Rprintf("\n");
randtoolbox.c:    Rprintf("- %lu \n", seedArray[i]);
randtoolbox.c:    Rprintf("\n");
randtoolbox.c:        Rprintf("- %lu \n", seedArray[i]);
randtoolbox.c:    Rprintf("\n");
Binary file randtoolbox.o matches
Binary file randtoolbox.so matches
testrng.c:/*    if(n == NULL) Rprintf("blii\n");
testrng.c:    else Rprintf("toooo\n"); 
testrng.c:    //Rprintf("zogzog\n");    
testrng.c:    //Rprintf("zogzog\n");
testrng.c:    if(rHands == NULL) Rprintf("blii1\n");
testrng.c:    else Rprintf("toooo1\n"); 
testrng.c:    if(INTEGER(dims) == NULL  ) Rprintf("blii2\n");
testrng.c:    else Rprintf("toooo2\n"); 
testrng.c:        if(resultinR == NULL) Rprintf("zog\n");
testrng.c:    else Rprintf("toooo2\n");*/
testrng.c:            Rprintf("temp : ");
testrng.c:                Rprintf(" %d\t", temp[j]);
testrng.c:            Rprintf("\n");
testrng.c:         if(resultinR == NULL) Rprintf("zog\n");
testrng.c:         else Rprintf("toooo2\n");*/
